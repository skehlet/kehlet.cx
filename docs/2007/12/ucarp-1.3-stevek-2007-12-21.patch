diff -ru ucarp-1.3.pristine/src/carp.c ucarp-1.3/src/carp.c
--- ucarp-1.3.pristine/src/carp.c	2007-07-04 08:17:12.000000000 -0700
+++ ucarp-1.3/src/carp.c	2007-12-21 16:05:51.000000000 -0800
@@ -62,12 +62,11 @@
 	if ((sc->sc_state != INIT) || (neutral != 1)) {
 	    (void) spawn_handler(dev_desc_fd, downscript);
 	}
-        gratuitous_arp(dev_desc_fd, 0);
         break;
     case MASTER:
         logfile(LOG_WARNING, _("Switching to state: MASTER"));
         (void) spawn_handler(dev_desc_fd, upscript);
-        gratuitous_arp(dev_desc_fd, 1);
+        gratuitous_arp(dev_desc_fd);
         break;
     default:
         logfile(LOG_ERR, _("Unknown state: [%d]"), (int) state);
@@ -301,7 +300,7 @@
 	sc->sc_delayed_arp--;
     if (sc->sc_delayed_arp == 0) {
 	if (sc->sc_state == MASTER) {
-	    gratuitous_arp(dev_desc_fd, 1);
+	    gratuitous_arp(dev_desc_fd);
 	}
 	sc->sc_delayed_arp = -1;
     }    
@@ -323,6 +322,10 @@
 #ifdef DEBUG
     logfile(LOG_DEBUG, "carp_setrun()");
 #endif
+    if (gettimeofday(&now, NULL) != 0) {
+	logfile(LOG_WARNING, _("initializing now to gettimeofday() failed: %s"),
+		strerror(errno));
+    }
     switch (sc->sc_state) {
     case INIT:
 	carp_set_state(sc, BACKUP);
@@ -379,7 +382,6 @@
     case BACKUP:
         carp_set_state(sc, MASTER);
         carp_send_ad(sc);
-        gratuitous_arp(dev_desc_fd, 0);
 	/* Schedule a delayed ARP request to deal w/ some L3 switches */
 	sc->sc_delayed_arp = 2;
 #ifdef INET6
@@ -560,10 +562,13 @@
         case MASTER:
             /*
              * If we receive an advertisement from a master who's going to
-             * be more frequent than us, go into BACKUP state.
+             * be more frequent than us, or from a master who's advertising
+             * with the same frequency as us but with a higher IP address, 
+             * go into BACKUP state.
              */
-            if (timercmp(&ch_tv, &sc_tv, <=)) {
-                sc.sc_ad_tmo.tv_sec = 0;
+            if (timercmp(&sc_tv, &ch_tv, >) ||
+                (timercmp(&sc_tv, &ch_tv, ==) &&
+                 iphead.ip_src.s_addr > srcip.s_addr)) {
                 carp_set_state(&sc, BACKUP);
                 carp_setrun(&sc, 0);
                 logfile(LOG_WARNING, _("Preferred master advertised: "
@@ -621,6 +626,18 @@
     _exit(EXIT_SUCCESS);
 }
 
+RETSIGTYPE sighandler_usr(const int sig)
+{
+    switch (sig) {
+        case SIGUSR1:
+            signalFlagEy=1;
+            break;
+        case SIGUSR2:
+            signalFlagEy=2;
+            break;
+    }
+}
+
 char *build_bpf_rule(void)
 {
     static char rule[256];
@@ -647,6 +664,7 @@
     struct ifreq iface;
     int fd;
     int nfds;
+    int iface_running = 1;
 
     sc.sc_vhid = vhid;
     sc.sc_advbase = advbase;
@@ -705,6 +723,8 @@
         (void) signal(SIGQUIT, sighandler_exit);
         (void) signal(SIGTERM, sighandler_exit);
     }
+    (void) signal(SIGUSR1, sighandler_usr);
+    (void) signal(SIGUSR2, sighandler_usr);
 
     if (gettimeofday(&now, NULL) != 0) {
 	logfile(LOG_WARNING, _("initializing now to gettimeofday() failed: %s"),
@@ -735,10 +755,41 @@
 	    sc.sc_ad_tmo.tv_usec = 0;
 	    sc.sc_md_tmo.tv_sec = 0;
 	    sc.sc_md6_tmo.tv_usec = 0;
+            if (iface_running) {
+                iface_running = 0;
+            }
 	    sleep(SECONDS_TO_WAIT_AFTER_INTERFACE_IS_DOWN);
 	    continue;
-	}
+	} else {
+            if (!iface_running) {
+                iface_running = 1;
+                carp_setrun(&sc, 0);
+            }
+        }
 #endif
+        if (signalFlagEy != 0) {
+            int flag = signalFlagEy;
+            signalFlagEy = 0;
+            switch (flag) {
+                case 1:
+                    logfile(LOG_INFO, "%s on %s id %d", 
+                            (sc.sc_state == BACKUP ? "BACKUP" : "MASTER"),
+                            interface, sc.sc_vhid);
+                    break;
+                case 2:
+#ifdef DEBUG
+                    logfile(LOG_DEBUG, "usr2(): Caught signal(usr2) considering going down");
+#endif
+                    if (sc.sc_state != BACKUP) {
+                        carp_set_state(&sc, BACKUP);
+                        sleep(3); /* hold up a sec... */
+                        carp_setrun(&sc, 0); /* now listen for 3 heartbeats, as usual */
+                        continue;
+                    }
+                    break;
+            }
+        }
+
         nfds = poll(pfds, (nfds_t) 1, sc.sc_advbase * 1000);
         if (nfds == -1) {
 	    if (errno == EINTR) {
diff -ru ucarp-1.3.pristine/src/garp.c ucarp-1.3/src/garp.c
--- ucarp-1.3.pristine/src/garp.c	2007-07-04 06:53:18.000000000 -0700
+++ ucarp-1.3/src/garp.c	2007-12-21 16:08:28.000000000 -0800
@@ -7,51 +7,54 @@
 # include <dmalloc.h>
 #endif
 
-int gratuitous_arp(const int dev_desc_fd, const int enable_virtual)
+int gratuitous_arp(const int dev_desc_fd)
 {
+    struct ether_header eh;
     static unsigned char arp[28] = {
             0x00, 0x01,   /* MAC address type */
             0x08, 0x00,   /* Protocol address type */
             0x06, 0x04,   /* MAC address size, protocol address size */
-            0x00, 0x02,   /* OP (1=request, 2=reply) */
+            0x00, 0x01,   /* OP (1=request, 2=reply) */
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   /* Sender MAC */
-            0x00, 0x00, 0x00, 0x00,   /* Sender IP */
+            0x00, 0x00, 0x00, 0x00,               /* Sender IP */
             0xff, 0xff, 0xff, 0xff, 0xff, 0xff,   /* Target MAC */
-            0xff, 0xff, 0xff, 0xff   /* Target IP */
+            0xff, 0xff, 0xff, 0xff                /* Target IP */
     };    
     unsigned char *pkt;
-    struct ether_header *eh_ptr;
     int rc;
 
     if (ETHER_ADDR_LEN > 6) {
 	abort();
     }
-    memcpy(&arp[8], hwaddr, sizeof hwaddr);
-    if (enable_virtual != 0) {
-        arp[7] = 0x02;
-        memcpy(&arp[14], &vaddr.s_addr, (size_t) 4U);
-    } else {
-	arp[7] = 0x01;
-	memcpy(&arp[14], &vaddr.s_addr, (size_t) 4U);
-	memset(&arp[18], 0xff, ETHER_ADDR_LEN);
-	memcpy(&arp[24], &vaddr.s_addr, (size_t) 4U);
-    }
-    if ((pkt = ALLOCA(sizeof *eh_ptr + sizeof arp)) == NULL) {
+
+    /*
+     * - Gratuitous ARPs should use requests for the highest interoperability.
+     * - Target MAC and IP should match sender
+     * http://www1.ietf.org/mail-archive/web/dhcwg/current/msg03797.html
+     * http://en.wikipedia.org/wiki/Address_Resolution_Protocol
+     * http://ettercap.sourceforge.net/forum/viewtopic.php?t=2392
+     * http://wiki.ethereal.com/Gratuitous_ARP
+     */
+    arp[7] = 0x01;                                 /* request op */
+    memcpy(&arp[8], hwaddr, sizeof hwaddr);        /* Sender MAC */
+    memcpy(&arp[14], &vaddr.s_addr, (size_t) 4U);  /* Sender IP */
+    memcpy(&arp[18], hwaddr, sizeof hwaddr);       /* Target MAC */
+    memcpy(&arp[24], &vaddr.s_addr, (size_t) 4U);  /* Target IP */
+
+    memset(&eh, 0, sizeof eh);
+    memcpy(&eh.ether_shost, hwaddr, sizeof hwaddr);
+    memset(&eh.ether_dhost, 0xff, ETHER_ADDR_LEN);
+    eh.ether_type = htons(ETHERTYPE_ARP);
+
+    if ((pkt = ALLOCA(sizeof eh + sizeof arp)) == NULL) {
         logfile(LOG_ERR, _("out of memory to send gratuitous ARP"));
         return -1;
     }
-    memcpy(pkt + sizeof *eh_ptr, arp, sizeof arp);
-    {
-        struct ether_header eh;
-        
-        memcpy(&eh, pkt, sizeof eh);
-        memcpy(&eh.ether_shost, &arp[8], ETHER_ADDR_LEN);
-        memcpy(&eh.ether_dhost, &arp[18], ETHER_ADDR_LEN);
-        eh.ether_type = htons(ETHERTYPE_ARP);
-        memcpy(pkt, &eh, sizeof eh);
-    }
+    memcpy(pkt, &eh, sizeof eh);
+    memcpy(pkt + sizeof eh, arp, sizeof arp);
+
     do {
-	rc = write(dev_desc_fd, pkt, sizeof *eh_ptr + sizeof arp);
+	rc = write(dev_desc_fd, pkt, sizeof eh + sizeof arp);
     } while (rc < 0 && errno == EINTR);
     if (rc < 0) {
         logfile(LOG_ERR, _("write() in garp: %s"), strerror(errno));
Binary files ucarp-1.3.pristine/src/.garp.c.swp and ucarp-1.3/src/.garp.c.swp differ
diff -ru ucarp-1.3.pristine/src/garp.h ucarp-1.3/src/garp.h
--- ucarp-1.3.pristine/src/garp.h	2007-07-04 06:35:06.000000000 -0700
+++ ucarp-1.3/src/garp.h	2007-12-21 16:04:54.000000000 -0800
@@ -1,6 +1,6 @@
 #ifndef __GARP_H__
 #define __GARP_H__ 1
 
-int gratuitous_arp(const int dev_desc_fd, const int enable_virtual);
+int gratuitous_arp(const int dev_desc_fd);
 
 #endif
diff -ru ucarp-1.3.pristine/src/spawn.c ucarp-1.3/src/spawn.c
--- ucarp-1.3.pristine/src/spawn.c	2007-07-04 06:34:59.000000000 -0700
+++ ucarp-1.3/src/spawn.c	2007-12-19 16:45:33.000000000 -0800
@@ -21,11 +21,15 @@
     if (pid == (pid_t) 0) {
         (void) close(dev_desc_fd);
         execl(script, script, interface, vaddr_arg, xparam, (char *) NULL);
-	logfile(LOG_ERR, _("Unable to exec %s %s: %s"), script, interface,
-		strerror(errno));
+	logfile(LOG_ERR, _("Unable to exec %s %s %s%s%s: %s"), 
+                script, interface, vaddr_arg, 
+                (xparam ? " " : ""), (xparam ? xparam : ""), 
+                strerror(errno));
         _exit(EXIT_FAILURE);
     } else if (pid != (pid_t) -1) {
-        logfile(LOG_WARNING, _("Spawning [%s %s]"), script, interface);
+        logfile(LOG_WARNING, _("Spawning [%s %s %s%s%s]"), 
+                script, interface, vaddr_arg, 
+                (xparam ? " " : ""), (xparam ? xparam : ""));
 #ifdef HAVE_WAITPID
 	{
 	    while (waitpid(pid, NULL, 0) == (pid_t) -1 && errno == EINTR);
diff -ru ucarp-1.3.pristine/src/ucarp.c ucarp-1.3/src/ucarp.c
--- ucarp-1.3.pristine/src/ucarp.c	2007-07-04 06:34:59.000000000 -0700
+++ ucarp-1.3/src/ucarp.c	2007-12-19 16:45:33.000000000 -0800
@@ -221,7 +221,7 @@
             }
             break;
         }
-	case 'm': {
+	case 'x': {
 	    free(xparam);
 	    if ((xparam = strdup(optarg)) == NULL) {
                 die_mem();
diff -ru ucarp-1.3.pristine/src/ucarp.h ucarp-1.3/src/ucarp.h
--- ucarp-1.3.pristine/src/ucarp.h	2007-07-04 07:24:07.000000000 -0700
+++ ucarp-1.3/src/ucarp.h	2007-12-19 16:45:33.000000000 -0800
@@ -214,6 +214,7 @@
 #define DEFAULT_FACILITY LOG_DAEMON
 
 int docarp(void);
+static int signalFlagEy=0;
 
 #include "globals.h"
 
diff -ru ucarp-1.3.pristine/src/ucarp_p.h ucarp-1.3/src/ucarp_p.h
--- ucarp-1.3.pristine/src/ucarp_p.h	2007-07-04 06:35:07.000000000 -0700
+++ ucarp-1.3/src/ucarp_p.h	2007-12-19 16:45:33.000000000 -0800
@@ -1,7 +1,7 @@
 #ifndef __CARP_P_H__
 #define __CARP_P_H__ 1
 
-static const char *GETOPT_OPTIONS = "i:s:v:p:Pa:hb:k:m:nu:d:r:zf:B";
+static const char *GETOPT_OPTIONS = "i:s:v:p:Pa:hb:k:x:nu:d:r:zf:B";
 
 static struct option long_options[] = {
     { "interface", 1, NULL, 'i' },
@@ -21,7 +21,7 @@
     { "facility", 1, NULL, 'f' },
     { "daemonize", 0, NULL, 'B' },
     { "passfile", 1, NULL, 'o' },
-    { "xparam", 1, NULL, 'm' },
+    { "xparam", 1, NULL, 'x' },
     { NULL, 0, NULL, 0 }
 };
 
